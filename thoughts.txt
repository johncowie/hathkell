ROADMAP:

X introduce haskeline to repl
X sort out tests
X do string parsing
- deal with escape characters properly in parsing
X do file io
X make closures work
- fix state tests
- support variadic functions
- make lists
- add comment support to parser
- make defmacro work


closures

current:

(def f
  (fun (a)
    (fun (b)
      (* a b))))

(f 1) => (fun (b) (* a b))
((f 1)) => error "can't resolve a" - outer layer is peeled away without resolving layers below

option 1:
  (f 1) => (fun (b) (* 1 b))  - for bindings when fun is executed, go through body and resolve argument usages with value

option 2:
  (f 1) => (fun (b) (* a b)) {a 2}  - when fun is executed stored, store closures alongside it

(fun (b) ..)   is a call to evalAST, so closures are going to have to be passed through evalAST, or basically everywhere


-- what if there are other functions in between?

(def f (fun (a) (def c 4) (fun (b) (* c b a)))) ((f 2) 3) => that scope needs to be stored as well


(def f (fun (a) (fun (a) (* a a)))) second a needs to win out
